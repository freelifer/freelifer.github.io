<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Freelifer - 个人博客</title><link>http://freelifer.github.io/</link><description>Recent content on Freelifer - 个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate><atom:link href="http://freelifer.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>关于我</title><link>http://freelifer.github.io/about/</link><pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate><guid>http://freelifer.github.io/about/</guid><description/></item><item><title>阿里云ECS搭建Docker</title><link>http://freelifer.github.io/post/%E9%98%BF%E9%87%8C%E4%BA%91ecs%E6%90%AD%E5%BB%BAdocker/</link><pubDate>Tue, 16 Oct 2018 10:11:04 +0000</pubDate><guid>http://freelifer.github.io/post/%E9%98%BF%E9%87%8C%E4%BA%91ecs%E6%90%AD%E5%BB%BAdocker/</guid><description>&lt;p>云服务器Elastic Compute Service（ECS）是阿里云提供的一种基础云计算服务。在其上搭建Docker步骤和注意事项&lt;/p>
&lt;blockquote>
&lt;p>系统：CentOS 7.0&lt;/p>
&lt;/blockquote>
&lt;h2 id="centos安装docker">CentOS安装Docker&lt;/h2>
&lt;h3 id="添加yum源">添加&lt;code>yum&lt;/code>源&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">yum install epel-release –y
yum clean all
yum list
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="安装并运行docker">安装并运行Docker&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">yum install docker-io –y
systemctl start docker
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="检查安装结果">检查安装结果&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker info
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="镜像加速器设置">镜像加速器设置&lt;/h3>
&lt;p>安装完成之后，&lt;code>docker pull&lt;/code> 发现无法拉取镜像，需要设置镜像加速器&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39;
{
&amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://opcl0w45.mirror.aliyuncs.com&amp;#34;]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="https://cr.console.aliyun.com/cn-shenzhen/mirrors">阿里云控制端容器镜像服务&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker run -p 80:80 -p 443:443 --name nginx \
-v /volume/nginx/html:/usr/share/nginx/html \
-v /volume/nginx/conf.d:/etc/nginx/conf.d \
-v /volume/nginx/logs:/var/log/nginx \
-d nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>-v /volume/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \&lt;/p></description></item><item><title>Docker部署nginx</title><link>http://freelifer.github.io/post/docker%E9%83%A8%E7%BD%B2nginx/</link><pubDate>Sun, 05 Aug 2018 15:11:04 +0000</pubDate><guid>http://freelifer.github.io/post/docker%E9%83%A8%E7%BD%B2nginx/</guid><description>&lt;p>Nginx (engine x) 是一个高性能的HTTP和反向代理服务，也是一个IMAP/POP3/SMTP服务。利用Docker安装nginx步骤和注意事项&lt;/p>
&lt;blockquote>
&lt;p>系统：CentOS 7.0&lt;/p>
&lt;/blockquote>
&lt;h2 id="centos安装docker">CentOS安装Docker&lt;/h2>
&lt;h3 id="拉取nginx镜像">拉取nginx镜像&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker pull nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="启动容器">启动容器&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker run -p 80:80 -p 443:443 --name nginx \
-v /volume/nginx/html:/usr/share/nginx/html \
-v /volume/nginx/conf.d:/etc/nginx/conf.d \
-v /volume/nginx/logs:/var/log/nginx \
-d nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="nginx配置">nginx配置&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">log_format proxyformat &amp;#34;$remote_addr $request_time $http_x_readtime [$time_local] \&amp;#34;$request_method http://$host$request_uri\&amp;#34; $status $body_bytes_sent \&amp;#34;$http_referer\&amp;#34; \&amp;#34;$upstream_addr\&amp;#34; \&amp;#34;$http_user_agent\&amp;#34; \&amp;#34;$upstream_response_time\&amp;#34; \&amp;#34;$request_time\&amp;#34;&amp;#34;;
server {
listen 80;
server_name ali.hellowood.com.cn;
location / {
proxy_pass http://172.17.0.1:8080;
proxy_set_header Host $http_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="查询宿主机-ip">查询宿主机 IP&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker inspect --format &amp;#39;{{ .NetworkSettings.IPAddress }}&amp;#39; &amp;lt;container-ID&amp;gt;
# 或
docker inspect &amp;lt;container id&amp;gt;
# 或
docker inspect -f &amp;#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39; container_name_or_id
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>-v /volume/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \&lt;/p></description></item><item><title>docker部署gogs</title><link>http://freelifer.github.io/post/docker%E9%83%A8%E7%BD%B2gogs/</link><pubDate>Tue, 10 Jul 2018 10:34:25 +0000</pubDate><guid>http://freelifer.github.io/post/docker%E9%83%A8%E7%BD%B2gogs/</guid><description>&lt;p>利用docker部署gogs，利用nginx反向代理gogs，暴露80端口，配置域名git.xxxx.com&lt;/p>
&lt;h3 id="1-mysql数据库安装">1. Mysql数据库安装&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker run -d --name master01 -v /volume/mysql/data/master01:/var/lib/mysql -v /volume/mysql/master01:/etc/mysql/conf.d -e &lt;span class="nv">MYSQL_ROOT_PASSWORD&lt;/span>&lt;span class="o">=&lt;/span>xzz520 -p 32769:3306 mysql:5.7
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2-gogs安装">2. gogs安装&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker run -d --name&lt;span class="o">=&lt;/span>mygogs -p 10080:3000 -v /volume/gogs:/data gogs/gogs
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3-nginx安装">3. nginx安装&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker run -p 80:80 --name nginx -v /volume/nginx/html:/usr/share/nginx/html -v /volume/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /volume/nginx/conf.d:/etc/nginx/conf.d -v /volume/nginx/logs:/var/log/nginx -d nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="https://www.cnblogs.com/bingo1024/p/9022890.html">Docker安装nginx&lt;/a>&lt;/p></description></item><item><title>搭建ssr+polipo</title><link>http://freelifer.github.io/post/%E6%90%AD%E5%BB%BAssr-polipo/</link><pubDate>Wed, 27 Jun 2018 13:40:35 +0000</pubDate><guid>http://freelifer.github.io/post/%E6%90%AD%E5%BB%BAssr-polipo/</guid><description>&lt;p>&lt;a href="https://github.com/storezhang/docker-ssr-client">https://github.com/storezhang/docker-ssr-client&lt;/a>&lt;/p>
&lt;p>docker run -d -name ssrp -p 1081:1081 -v /etc/ssrp/data:/ssr-data&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker run -d --name ssrp -p 1081:1081 -v /etc/ssrp/data:/ssr-data storezhang/ssr-client
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker exec -i bb2 /bin/sh
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker pull breakwa11/shadowsocksr
docker run -itd -p 8888:8888 --env &lt;span class="nv">SERVER_PORT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">8888&lt;/span> --env &lt;span class="nv">PASSWORD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$PASSWORD&lt;/span> --name ssr breakwa11/shadowsocksr
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>搭建gitlab</title><link>http://freelifer.github.io/post/%E6%90%AD%E5%BB%BAgitlab/</link><pubDate>Wed, 27 Jun 2018 11:25:10 +0000</pubDate><guid>http://freelifer.github.io/post/%E6%90%AD%E5%BB%BAgitlab/</guid><description>&lt;h3 id="docker安装gitlab镜像">docker安装gitlab镜像&lt;/h3>
&lt;h4 id="1-镜像拉取">1. 镜像拉取&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker pull gitlab/gitlab-ce:latest
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="https://www.centos.bz/2017/07/docker-install-gitlab-external-nginx/">https://www.centos.bz/2017/07/docker-install-gitlab-external-nginx/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/liyangLife/p/8176791.html">https://www.cnblogs.com/liyangLife/p/8176791.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/u011054333/article/details/61532271">https://blog.csdn.net/u011054333/article/details/61532271&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/gdlinux/p/6760919.html">https://www.cnblogs.com/gdlinux/p/6760919.html&lt;/a>&lt;/p></description></item><item><title>前端动画笔记</title><link>http://freelifer.github.io/post/%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 13 Jun 2018 09:40:06 +0000</pubDate><guid>http://freelifer.github.io/post/%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>前端网页制作动画的几种方式&lt;/p>
&lt;h3 id="1-css的transition">1. css的transition&lt;/h3>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">transition: property duration timing-function delay;
默认值： all 0 ease 0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>property:填写需要变化的css属性如：width,line-height,font-size,color等;
duration:完成过渡效果需要的时间（2s 或者2000ms）
timing-function:完成效果的速度曲线（linear,ease,ease-in,ease-out等等）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">值&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">linear&lt;/td>
&lt;td>匀速（等于 cubic-bezier(0,0,1,1)）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">ease&lt;/td>
&lt;td>从慢到快再到慢（cubic-bezier(0.25,0.1,0.25,1)）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">ease-in&lt;/td>
&lt;td>慢慢变快（等于 cubic-bezier(0.42,0,1,1)）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">ease-out&lt;/td>
&lt;td>慢慢变慢（等于 cubic-bezier(0,0,0.58,1)）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">ease-in-out&lt;/td>
&lt;td>先变快再到慢（等于 cubic-bezier(0.42,0,0.58,1)）。渐显渐隐效果&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">cubic-bezier(&lt;em>n&lt;/em>,&lt;em>n&lt;/em>,&lt;em>n&lt;/em>,&lt;em>n&lt;/em>)&lt;/td>
&lt;td>在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>timing-delay:动画效果的延迟触发时间（2s 或者2000ms）。&lt;/p>
&lt;h3 id="2-css3的animation属性">2. css3的animation属性&lt;/h3>
&lt;p>&lt;a href="http://www.w3school.com.cn/css3/css3_animation.asp">w3school教程&lt;/a>&lt;/p>
&lt;p>语法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">animation: name duration timing-function delay iteration-count direction;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>name:keyframe的名称，也就是定义了关键帧的动画的名称,这个名称用来区别不同的动画。
duration:完成动画所需要的时间（2s 或者 2000ms）
timing-function:完成动画的速度曲线
delay：动画开始之前的延迟
iteration-count：动画播放次数
direction：是否轮流反向播放动画（normal:正常顺序播放，alternate下一次反向播放）如果把动画设置为只播放一次，则该属性没有效果。&lt;/p>
&lt;h3 id="3-原生js动画">3. 原生js动画&lt;/h3>
&lt;p>利用js代码setInterval函数，将动画一帧一帧的绘制出来&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;div id=&amp;#34;odiv&amp;#34; class=&amp;#34;odiv&amp;#34;&amp;gt;
&amp;lt;div id=&amp;#34;sdiv&amp;#34; class=&amp;#34;sdiv&amp;#34;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script language=&amp;#34;javascript&amp;#34;&amp;gt;
window.onload = function(){
var odiv = document.getElementById(&amp;#39;odiv&amp;#39;);
odiv.onmouseover = function(){
startMover(0);
}
odiv.onmouseout = function(){
startMover(-200);
}
}
var timer = null;
function startMover(a){//速度和目标值
clearInterval(timer);//执行当前动画同时清除之前的动画
var odiv = document.getElementById(&amp;#39;odiv&amp;#39;);
timer = setInterval(function(){
var speed = (a-odiv.offsetLeft)/10;//缓冲动画的速度参数变化值
//如果速度是大于0，说明是向右走，那么就向上取整
speed = speed&amp;gt;0?Math.ceil(speed):Math.floor(speed);
//Math.floor();向下取整
if(odiv.offsetLeft == a){
clearInterval(timer);
}
else{
odiv.style.left = odiv.offsetLeft+speed+&amp;#39;px&amp;#39;;
}
},30);
}
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Android Studio下的Gradle版本更新</title><link>http://freelifer.github.io/post/gradle%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 01 Jun 2018 10:20:24 +0000</pubDate><guid>http://freelifer.github.io/post/gradle%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</guid><description>&lt;p>Androd Studio升级之后，相应的gradle版本也需要升级，如果任由Android Studio程序自动更新gradle，由于网络的原因，下载最新的Gradle会很慢或者直接失败&lt;/p>
&lt;h3 id="下载gradle">下载Gradle&lt;/h3>
&lt;p>gradle的&lt;a href="https://services.gradle.org/distributions/">官方下载地址&lt;/a>，打开后下载对应的gradle-x.x-all.zip版本，也可以复制下载链接到迅雷中&lt;/p>
&lt;h3 id="替换本地gradle">替换本地gradle&lt;/h3>
&lt;p>将下载下来的gradle-x.x-all.zip压缩文件直接复制到用户目录&lt;code>USER_HOME/.gradle/wrapper/dists/gradle-x.x-all/8bnwg5hd3w55iofp58khbp6yv/&lt;/code>目录下，该目录下的其它文件全部删除，8bnwg5hd3w55iofp58khbp6yv这个目录是由Android Studio自动生成的，不可更改。&lt;/p>
&lt;p>重新打开Android Studio，会自动解压并生成文件，到此gradle更新完成。&lt;/p></description></item><item><title>PS快捷键</title><link>http://freelifer.github.io/post/ps%E5%BF%AB%E6%8D%B7%E9%94%AE/</link><pubDate>Thu, 24 May 2018 22:51:48 +0000</pubDate><guid>http://freelifer.github.io/post/ps%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid><description>&lt;p>photoshop快捷键记录&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>#&lt;/th>
&lt;th>功能&lt;/th>
&lt;th align="center">快捷键&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>填充前景色&lt;/td>
&lt;td align="center">Alt+Delete&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>填充背景色&lt;/td>
&lt;td align="center">Ctrl+Delete&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>服务器端口修改防扫描攻击</title><link>http://freelifer.github.io/post/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3%E4%BF%AE%E6%94%B9%E9%98%B2%E6%89%AB%E6%8F%8F%E6%94%BB%E5%87%BB/</link><pubDate>Tue, 22 May 2018 09:45:21 +0000</pubDate><guid>http://freelifer.github.io/post/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3%E4%BF%AE%E6%94%B9%E9%98%B2%E6%89%AB%E6%8F%8F%E6%94%BB%E5%87%BB/</guid><description>&lt;p>服务器可能会受到暴力破解SSH登录，批量端口扫描等问题，所有服务器需要防暴力破解，修改或关闭常用的端口&lt;/p>
&lt;h3 id="尝试登录到服务器的密码尝试失败的ip和次数">尝试登录到服务器的密码尝试失败的ip和次数&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">grep &lt;span class="s2">&amp;#34;Failed&amp;#34;&lt;/span> /var/log/secure &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $(NF-3)}&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> sort &lt;span class="p">|&lt;/span> uniq -c &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $1&amp;#34;=&amp;#34;$2;}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="修改ssh登录的连接端口">修改SSH登录的连接端口&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>首先，我们可以打开SSH的配置文件，该文件的目录在/etc/ssh/sshd_config中，打开这个文件，我们能够看到如下的内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># If you want to change the port on a SELinux system, you have to tell
# SELinux about this change.
# semanage port -a -t ssh_port_t -p tcp #PORTNUMBER
#
#Port 22
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改登录端口号，这里默认配置的是22端口，我们需要修改的就是这个端口号。即我们在下面添加一个自定义的未被占用的端口号作为登录SSH的端口号使用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># If you want to change the port on a SELinux system, you have to tell
# SELinux about this change.
# semanage port -a -t ssh_port_t -p tcp #PORTNUMBER
#
#Port 22
Port XXX //自定义端口号
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>用新的端口号进行连接登录，特别注意的是，为了防止新增的端口号可能无效，而旧的22端口号也已经被注释了。这个时候就悲剧了。所以我们一定要先把22端口保持开放。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">ssh -p xxx root@ip
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>关闭22端口号。新的验证登录没有问题之后，我们再把旧的22端口进行关闭，甚至可以直接把该端口都关闭，使其无法连接该端口。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="利用脚本屏蔽ssh登录失败次数多的ip">利用脚本屏蔽SSH登录失败次数多的ip&lt;/h3>
&lt;p>如果想定时的屏蔽ssh登录失败过多的IP，可以用 计划任务+脚本 完成。对于ssh服务，屏蔽IP较多的情况下，用 tcp wrapper 是比较理想的，其配置文件是 /etc/hosts.{deny|allow}，这里需要使用 /etc/hosts.deny 来屏蔽掉恶意访问的IP&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建脚本，脚本内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
&lt;span class="nb">export&lt;/span> PATH
cat /var/log/secure &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;/Failed/{print $(NF-3)}&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> sort &lt;span class="p">|&lt;/span> uniq -c &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $2&amp;#34;=&amp;#34;$1;}&amp;#39;&lt;/span> &amp;gt; /root/sshblack.txt
&lt;span class="nv">LIMIT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">20&lt;/span>
&lt;span class="k">for&lt;/span> i in &lt;span class="sb">`&lt;/span>cat /root/sshblack.txt&lt;span class="sb">`&lt;/span>
&lt;span class="k">do&lt;/span>
&lt;span class="nv">IP&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;`echo &lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2"> | awk -F = &amp;#39;{print &lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">}&amp;#39;`&amp;#34;&lt;/span>
&lt;span class="nv">TIMES&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;`echo &lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2"> | awk -F = &amp;#39;{print &lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">}&amp;#39;`&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$TIMES&lt;/span> -ge &lt;span class="nv">$LIMIT&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
grep &lt;span class="nv">$IP&lt;/span> /etc/hosts.deny &amp;gt; /dev/null
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$?&lt;/span> !&lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;sshd:&lt;/span>&lt;span class="nv">$IP&lt;/span>&lt;span class="s2">:deny&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/hosts.deny
&lt;span class="k">fi&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="c1">#如果添加到crontab, 要了解是否执行成功？那么可以添加一行日志&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$?&lt;/span> -eq &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;`date +&amp;#34;&lt;/span>%b %d %T&lt;span class="s2">&amp;#34;` &lt;/span>&lt;span class="nv">$HOSTNAME&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$USER&lt;/span>&lt;span class="s2"> ssh_cron.sh finished.&amp;#34;&lt;/span> &amp;gt;&amp;gt; /var/log/messages
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;`date +&amp;#34;&lt;/span>%b %d %T&lt;span class="s2">&amp;#34;` &lt;/span>&lt;span class="nv">$HOSTNAME&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$USER&lt;/span>&lt;span class="s2"> ssh_cron.sh failed.&amp;#34;&lt;/span> &amp;gt;&amp;gt; /var/log/messages
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>crontab -e 编辑任务计划，添加比如每天凌晨2点整，静默执行一次&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">00 2 * * * sh /root/ssh_cron.sh &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
# 2&amp;gt;&amp;amp;1 写法等同于 sh /root/ssh_cron.sh &amp;amp;&amp;gt; /dev/null
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="centos-7安装fail2ban--firewalld防止爆破与cc攻击">CentOS 7安装fail2ban + Firewalld防止爆破与CC攻击&lt;/h3>
&lt;p>查看fail2ban屏蔽信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">fail2ban-client status sshd
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="https://www.xiaoz.me/archives/9831">CentOS 7安装fail2ban + Firewalld防止爆破与CC攻击&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-centos-7">fail2ban&lt;/a>&lt;/p></description></item><item><title>docker MySQL主从复制</title><link>http://freelifer.github.io/post/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</link><pubDate>Sat, 19 May 2018 22:53:33 +0000</pubDate><guid>http://freelifer.github.io/post/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</guid><description>&lt;p>master01.cnf配置&lt;/p>
&lt;p>[mysqld]
log-bin=mysql-master01-bin # 使用binary logging，mysql-master01-bin是log文件名的前缀
server-id=1 # 唯一服务器ID，非0整数，不能和其他服务器的server-id重复&lt;/p>
&lt;p>创建master01容器&lt;/p>
&lt;p>docker run -d &amp;ndash;name master01 -v /mysql/data/master01:/var/lib/mysql -v /mysql/master01:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=xzz520 -p 3306:3306 mysql:5.7&lt;/p>
&lt;p>show master status; # 查看master的状态&lt;/p>
&lt;p>SET sql_mode=(SELECT REPLACE(@@sql_mode,&amp;lsquo;ONLY_FULL_GROUP_BY&amp;rsquo;,''));
GRANT REPLICATION SLAVE ON &lt;em>.&lt;/em> to &amp;lsquo;backup&amp;rsquo;@'%&amp;rsquo; identified by &amp;lsquo;123456&amp;rsquo;;&lt;/p>
&lt;p>SET sql_mode=(SELECT REPLACE(@@sql_mode,&amp;lsquo;ONLY_FULL_GROUP_BY&amp;rsquo;,''));
GRANT REPLICATION SLAVE ON &lt;em>.&lt;/em> to &amp;lsquo;backup&amp;rsquo;@'%&amp;rsquo; identified by &amp;lsquo;123456&amp;rsquo;;&lt;/p>
&lt;p>创建一个用户
CREATE USER &amp;lsquo;backup&amp;rsquo;@&amp;lsquo;X.X.X.X&amp;rsquo; IDENTIFIED BY &amp;lsquo;123456&amp;rsquo;;&lt;/p>
&lt;p>赋予“REPLICATION SLAVE”的权限
GRANT REPLICATION SLAVE ON &lt;em>.&lt;/em> TO &amp;lsquo;user&amp;rsquo;@&amp;lsquo;X.X.X.X&amp;rsquo; IDENTIFIED BY &amp;lsquo;123456&amp;rsquo;;
grant replication slave on &lt;em>.&lt;/em> to &lt;a href="mailto:slave@112.74.34.233">slave@112.74.34.233&lt;/a> identified by &amp;lsquo;slave&amp;rsquo;;&lt;/p>
&lt;p>slave01.cnf配置&lt;/p>
&lt;p>[mysqld]
log-bin=mysql-slave01-bin
server-id=2&lt;/p>
&lt;p>创建slave01容器&lt;/p>
&lt;p>docker run -d &amp;ndash;name slave01 -v /mysql/data//slave01:/var/lib/mysql -v /mysql/slave01:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=xzz520 -p 3306:3306 mysql:5.7&lt;/p>
&lt;p>在slave01中配置与master01相关的内容&lt;/p>
&lt;p>SET sql_mode=(SELECT REPLACE(@@sql_mode,&amp;lsquo;ONLY_FULL_GROUP_BY&amp;rsquo;,''));&lt;/p>
&lt;p>change master to master_host='144.202.114.103&amp;rsquo;,master_port=3306,master_user='slave&amp;rsquo;,master_password='slave&amp;rsquo;,master_log_file='mysql-master01-bin.000003&amp;rsquo;, master_log_pos=2720;&lt;/p>
&lt;p>change master to master_host='192.168.10.223&amp;rsquo;,master_port=3306,master_user='backup&amp;rsquo;,master_password='123456&amp;rsquo;,master_log_file='mysql-master01-bin.000003&amp;rsquo;, master_log_pos=154;&lt;/p>
&lt;p>master_host是宿主机的IP（ifconfig查到的操作系统IP，不是容器的IP，一定不能搞错）
master_port是主服务器的映射到3306的端口（默认3306）
master_user为创建的备份用户
master_password备份用户的密码
master_log_file和master_log_pos则是show master status列表里面的两个值，分别是mysql日志名和起始备份位置&lt;/p>
&lt;p>start slave;&lt;/p>
&lt;p>show slave status;&lt;/p>
&lt;p>如果是Waiting for master to send event则说明主从复制成功了，若是Connecting to master肯定是配置错误，楼主就错了几次，重删除配置一下就行，这就是容器的好处，删除的代价很小，短时间就可以恢复。如果是Waiting for master to send event，对主库的增删改查从库都会同步修改。&lt;/p>
&lt;p>删除用户
drop user test;&lt;/p>
&lt;p>查看权限&lt;/p>
&lt;p>show grants ; #查看自己的权限&lt;/p>
&lt;p>show grants for backup@&amp;lsquo;xxx.xxx.xx.xx&amp;rsquo;; #查看其他用户的权限。&lt;/p>
&lt;p>select * from mysql.user where user='backup&amp;rsquo;;&lt;/p>
&lt;p>　二、常用命令&lt;/p>
&lt;p>　　1、显示当前数据库服务器中的数据库列表：&lt;/p>
&lt;p>　　mysql&amp;gt; SHOW DATABASES;&lt;/p>
&lt;p>　　2、建立数据库：&lt;/p>
&lt;p>　　mysql&amp;gt; CREATE DATABASE 库名;&lt;/p>
&lt;p>　　3、建立数据表：&lt;/p>
&lt;p>　　mysql&amp;gt; USE 库名;&lt;/p>
&lt;p>　　mysql&amp;gt; CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1));&lt;/p>
&lt;p>　　4、删除数据库：&lt;/p>
&lt;p>　　mysql&amp;gt; DROP DATABASE 库名;&lt;/p>
&lt;p>　　5、删除数据表：&lt;/p>
&lt;p>　　mysql&amp;gt; DROP TABLE 表名;&lt;/p>
&lt;p>　　6、将表中记录清空：&lt;/p>
&lt;p>　　mysql&amp;gt; DELETE FROM 表名;&lt;/p>
&lt;p>　　7、往表中插入记录：&lt;/p>
&lt;p>　　mysql&amp;gt; INSERT INTO 表名 VALUES (&amp;ldquo;hyq&amp;rdquo;,&amp;ldquo;M&amp;rdquo;);&lt;/p>
&lt;p>　　8、更新表中数据：&lt;/p>
&lt;p>　　mysql-&amp;gt; UPDATE 表名 SET 字段名1='a&amp;rsquo;,字段名2='b&amp;rsquo; WHERE 字段名3='c&amp;rsquo;;&lt;/p>
&lt;p>　　9、用文本方式将数据装入数据表中：&lt;/p>
&lt;p>　　mysql&amp;gt; LOAD DATA LOCAL INFILE &amp;ldquo;D:/mysql.txt&amp;rdquo; INTO TABLE 表名;&lt;/p>
&lt;p>　　10、导入.sql文件命令：&lt;/p>
&lt;p>　　mysql&amp;gt; USE 数据库名;&lt;/p>
&lt;p>　　mysql&amp;gt; SOURCE d:/mysql.sql;&lt;/p>
&lt;p>　　11、命令行修改root密码：&lt;/p>
&lt;p>　　mysql&amp;gt; UPDATE mysql.user SET password=PASSWORD(&amp;lsquo;新密码&amp;rsquo;) WHERE User='root&amp;rsquo;;&lt;/p>
&lt;p>　　mysql&amp;gt; FLUSH PRIVILEGES;&lt;/p></description></item><item><title>ArrayMap源码阅读</title><link>http://freelifer.github.io/post/arraymap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</link><pubDate>Fri, 18 May 2018 10:11:04 +0000</pubDate><guid>http://freelifer.github.io/post/arraymap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</guid><description>&lt;p>ArrayMap 可以用来代替HashMap，它是一个&amp;lt;key,value&amp;gt;映射的数据结构，设计上更多的是考虑了内存的优化。&lt;/p>
&lt;h3 id="arraymap基础知识">ArrayMap基础知识&lt;/h3>
&lt;blockquote>
&lt;p>ArrayMap 位于 &lt;a href="https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/util/ArrayMap.java">android.util.ArrayMap&lt;/a>和&lt;a href="https://github.com/aosp-mirror/platform_frameworks_support/blob/master/compat/src/main/java/android/support/v4/util/ArrayMap.java">android.support.v4.util.ArrayMap&lt;/a>包中。&lt;/p>
&lt;/blockquote>
&lt;p>ArrayMap在设计上比传统的HashMap更多的考虑了内存的优化，可以理解为以时间换空间的一种优化。它使用了两个数组来存储数据——一个整型数组存储键的hashCode，另一个对象数组存储键/值对。这样既能避免为每个存入map中的键创建额外的对象，又能更积极的控制这些数据的长度的增加。因为增加长度只需要拷贝数组中的键，而不是重新构建一个哈希表。&lt;/p>
&lt;p>针对Android这种移动平台，也推出了更符合自己的api，比如SparseArray、ArrayMap用来代替HashMap在有些情况下能带来更好的性能提升。&lt;/p>
&lt;p>ArrayMap是一个&amp;lt;key,value&amp;gt;映射的数据结构，它设计上更多的是考虑内存的优化，内部是使用两个数组进行数据存储，一个数组记录key的hash值，另外一个数组记录Value值，它和SparseArray一样，也会对key使用二分法进行从小到大排序，在添加、删除、查找数据的时候都是先使用二分查找法得到相应的index，然后通过index来进行添加、查找、删除等操作，所以，应用场景和SparseArray的一样，如果在数据量比较大的情况下，那么它的性能将退化至少50%。&lt;/p>
&lt;p>推荐的数据结构:
• ArrayMap&amp;lt;K,V&amp;gt; 替代 HashMap&amp;lt;K,V&amp;gt;
• ArraySet&amp;lt;K,V&amp;gt; 替代 HashSet&amp;lt;K,V&amp;gt;
• SparseArray&lt;!-- raw HTML omitted --> 替代 HashMap&amp;lt;Integer,V&amp;gt;
• SparseBooleanArray 替代 HashMap&amp;lt;Integer,Boolean&amp;gt;
• SparseIntArray 替代 HashMap&amp;lt;Integer,Integer&amp;gt;
• SparseLongArray 替代 HashMap&amp;lt;Integer,Long&amp;gt;
• LongSparseArray&lt;!-- raw HTML omitted --> 替代 HashMap&amp;lt;Long,V&amp;gt;&lt;/p></description></item><item><title>docker golang编译</title><link>http://freelifer.github.io/post/docker-golang%E7%BC%96%E8%AF%91/</link><pubDate>Tue, 15 May 2018 10:20:04 +0000</pubDate><guid>http://freelifer.github.io/post/docker-golang%E7%BC%96%E8%AF%91/</guid><description>&lt;h3 id="基于scratch镜像">基于scratch镜像&lt;/h3>
&lt;blockquote>
&lt;p>Docker生态系统有一个特殊的镜像：scratch.这是一个空镜像。它不需要被创建或者下载，因为定义的就是空的。&lt;/p>
&lt;/blockquote>
&lt;h4 id="1-在golang项目目录创建dockerfile文件">1. 在golang项目目录，创建Dockerfile文件&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">FROM scratch
COPY ./hello /hello
ENTRYPOINT &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;/hello&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="2-在golang项目目录下交叉编译构建项目">2. 在golang项目目录下，交叉编译构建项目&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">GOOS=linux GOARCH=amd64 go build -o hello *.go
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="3-在运行docker服务器上创建镜像">3. 在运行docker服务器上，创建镜像&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">chmod +x hello
docker build -t hello .
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="4-在运行docker服务器上检查镜像是否生成成功并运行">4. 在运行docker服务器上，检查镜像是否生成成功并运行&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker images
docker run hello
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="参考">参考&lt;/h3>
&lt;p>&lt;a href="http://dockone.io/article/1712">Docker与Golang的巧妙结合&lt;/a>&lt;/p></description></item></channel></rss>